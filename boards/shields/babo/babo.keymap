/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/mouse.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#define BAS 0 // mouse key layer
#define NUM 1 // mouse key layer
#define FUN 2 // mouse key layer
#define GAM 3 // mouse key layer
#define GAM_F 4
#define MOU 5
#define SCL 6

&mt {
    tapping-term-ms = <200>;
};

/ {
    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&glidepoint>;
        input-processors = <&zip_temp_layer MOU 1000>;
    };

    /* input config for mouse scroll mode on momentary mouse scoll layer (MSC) */
    tb0_msl_ibl {
        compatible = "zmk,input-behavior-listener";
        device = <&glidepoint>;
        layers = <SCL>;
        evt-type = <INPUT_EV_REL>;
                
        /* slienting x-axis with alt event code */
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;

        /* invent scrolling direction */
        xy-swap;
        /* NOTE 1: This settings do not compitable with y-invert and x-invert */
        /* NOTE 2: Floating point computation requires alot of ram. */
        /*         This feature will cuase stackove flow with CONFIG_ZMK_USB_LOGGING=y */

        /* bind a behavior to down scaling input value to (1/8) */
        /* NOTE: This behavior memorizes recent pending displacement, it is different to scale-divisor. */
        /*       The delta value is accumlated until result >= 1 after cast. */
        /*       The scrolling will be smoother and allow precise scrolling */
        bindings = <&ib_wheel_scaler 1 8>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
            compatible = "zmk,input-behavior-scaler";
            #binding-cells = <2>;
            evt-type = <INPUT_EV_REL>;
            input-code = <INPUT_REL_WHEEL>;
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm_l: homerow_mods_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        td_mt: tap_dance_mod_tap {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&hm LCTRL BSPC>, <&kp BSPC>;
        };
        kanji: kanji_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp X>, <&kp GRAVE>;
            mods = <(MOD_RALT)>;
	    keep-mods = <(MOD_RALT)>;
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_del {
            timeout-ms = <50>;
            key-positions = <0 10>;
            bindings = <&kp ESC>;
            layers = <0>;
        };
        combo_gui {
            timeout-ms = <50>;
            key-positions = <9 19>;
            bindings = <&kp DEL>;
            layers = <0>;
        };
        combo_shift {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&kt LSHFT>;
            layers = <0>;
        };
		// left combo
		combo_s1 { timeout-ms = <80>; key-positions = <31 5>; bindings = <&kp CARET>; layers = <0>; };
		combo_s2 { timeout-ms = <80>; key-positions = <31 6>; bindings = <&kp AMPS>; layers = <0>; };
		combo_s3 { timeout-ms = <80>; key-positions = <31 7>; bindings = <&kp KP_MULTIPLY>; layers = <0>; };
		combo_s4 { timeout-ms = <80>; key-positions = <31 8>; bindings = <&kp LPAR>; layers = <0>; };
		combo_s5 { timeout-ms = <80>; key-positions = <31 9>; bindings = <&kp RPAR>; layers = <0>; };

		combo_s6 { timeout-ms = <80>; key-positions = <31 15>; bindings = <&kp SQT>; layers = <0>; };
		combo_s7 { timeout-ms = <80>; key-positions = <31 16>; bindings = <&kp RPAR>; layers = <0>; };
		combo_s8 { timeout-ms = <80>; key-positions = <31 17>; bindings = <&kp RBRC>; layers = <0>; };
		combo_s9 { timeout-ms = <80>; key-positions = <31 18>; bindings = <&kp RBKT>; layers = <0>; };
		combo_s10 { timeout-ms = <80>; key-positions = <31 19>; bindings = <&kp DQT>; layers = <0>; };

		combo_s11 { timeout-ms = <80>; key-positions = <31 25>; bindings = <&kp GT>; layers = <0>; };
		combo_s12 { timeout-ms = <80>; key-positions = <31 26>; bindings = <&kp EQUAL>; layers = <0>; };
		combo_s13 { timeout-ms = <80>; key-positions = <31 27>; bindings = <&kp PLUS>; layers = <0>; };
		combo_s14 { timeout-ms = <80>; key-positions = <31 28>; bindings = <&kp BSLH>; layers = <0>; };
		combo_s15 { timeout-ms = <80>; key-positions = <31 29>; bindings = <&kp PIPE>; layers = <0>; };


		//right combo
		combo_s16 { timeout-ms = <80>; key-positions = <32 0>; bindings = <&kp EXCL>; layers = <0>; };
		combo_s17 { timeout-ms = <80>; key-positions = <32 1>; bindings = <&kp AT>; layers = <0>; };
		combo_s18 { timeout-ms = <80>; key-positions = <32 2>; bindings = <&kp HASH>; layers = <0>; };
		combo_s19 { timeout-ms = <80>; key-positions = <32 3>; bindings = <&kp DLLR>; layers = <0>; };
		combo_s20 { timeout-ms = <80>; key-positions = <32 4>; bindings = <&kp PRCNT>; layers = <0>; };

		combo_s21 { timeout-ms = <80>; key-positions = <32 10>; bindings = <&kp DQT>; layers = <0>; };
		combo_s22 { timeout-ms = <80>; key-positions = <32 11>; bindings = <&kp LBKT>; layers = <0>; };
		combo_s23 { timeout-ms = <80>; key-positions = <32 12>; bindings = <&kp LBRC>; layers = <0>; };
		combo_s24 { timeout-ms = <80>; key-positions = <32 13>; bindings = <&kp LPAR>; layers = <0>; };
		combo_s25 { timeout-ms = <80>; key-positions = <32 14>; bindings = <&kp SQT>; layers = <0>; };

		combo_s26 { timeout-ms = <80>; key-positions = <32 20>; bindings = <&kp TILDE>; layers = <0>; };
		combo_s27 { timeout-ms = <80>; key-positions = <32 21>; bindings = <&kp GRAVE>; layers = <0>; };
		combo_s28 { timeout-ms = <80>; key-positions = <32 22>; bindings = <&kp UNDER>; layers = <0>; };
		combo_s29 { timeout-ms = <80>; key-positions = <32 23>; bindings = <&kp MINUS>; layers = <0>; };
		combo_s30 { timeout-ms = <80>; key-positions = <32 24>; bindings = <&kp LT>; layers = <0>; };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | ALT | LWR | SPC |   | ENT | RSE  | ALT |
			display-name = "Base";	
            bindings = <
                &kp Q &kp W  &kp E        &kp R         &kp T                     &kp Y          &kp U          &kp I     &kp O   &kp P
                &hm LGUI A &hm LALT S  &hm LCTRL D &hm LSHFT F &kp G              &kp H          &hm RSHFT J    &hm LCTRL K     &hm LALT L &hm RGUI SEMI
                &kp Z &kanji &kp C        &kp V         &kp B                     &kp N          &kp M          &kp COMMA &kp DOT &kp FSLH
                                       &hm LCTRL TAB &hm_l NUM SPACE             &hm_l FUN RET &hm RALT BSPC
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | CTRL |PSCRN| HOM | PUP | PUD | END |   | LFT | DWN |  UP | RGT |  `  |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | GUI |
			display-name = "Num";
            bindings = <
                &kp N1    &kp N2   &kp N3    &kp N4    &kp N5      &kp N6   &kp N7   &kp N8 &kp N9    &kp N0    
                &kp PSCRN &kp HOME &kp PG_UP &kp PG_DN &kp END     &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp RCTRL 
                &trans    &trans   &trans    &trans    &trans      &trans   &trans   &trans &trans    &trans   
                                             &trans    &trans      &trans   &trans  
            >;
        };

        super_layer {
            // -----------------------------------------------------------------------------------------
            // |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            // |      | BT1 | BT2 | BT3 | BT4 | BT5 |   |     | RON | HUI | SAI | BRI |     |
            // |      | USB | BLE |     |     | CLR |   |     | ROF | HUD | SAD | BRD |     |
            //                    |     |     |     |   |     |     |    |
			display-name = "Func";
            bindings = <
                &kp F2       &kp F3       &kp F4       &kp F5       &kp F6              &kp F7       &kp F8       &kp F9       &kp F10      &kp F11    
                &kp F1       &kp C_PREV   &kp C_MUTE   &kp C_PP     &kp C_NEXT          &kp C_BRI_DN &kp C_VOL_DN &kp C_VOL_UP &kp C_BRI_UP &kp F12    
                &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4        &to 0        &none        &to 3        &out OUT_TOG &bt BT_CLR 
                                      &trans       &trans                     &trans       &trans
            >;
        };

        game_layer_base {
            // -----------------------------------------------------------------------------------------
            // |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            // |      | BT1 | BT2 | BT3 | BT4 | BT5 |   |     | RON | HUI | SAI | BRI |     |
            // |      | USB | BLE |     |     | CLR |   |     | ROF | HUD | SAD | BRD |     |
            //                    |     |     |     |   |     |     |    |
			display-name = "G/Base";
            bindings = <  
                &kp Q &kp W &kp E   &kp R   &kp T        &none     &kp I    &kp UP   &none     &none 
                &kp A &kp S &kp D   &kp F   &kp G        &none     &kp LEFT &kp DOWN &kp RIGHT &kp LCTRL
                &kp Z &kp X &kp C   &kp V   &kp B        &none     &none    &none    &none     &kp LSHFT
                                    &kp TAB &kp SPACE    &kp ENTER &mo 4
            >;
        };

        game_layer_func {
            // -----------------------------------------------------------------------------------------
            // |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            // |      | BT1 | BT2 | BT3 | BT4 | BT5 |   |     | RON | HUI | SAI | BRI |     |
            // |      | USB | BLE |     |     | CLR |   |     | ROF | HUD | SAD | BRD |     |
            //                    |     |     |     |   |     |     |    |
			display-name = "G/Func";
            bindings = <
                &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 
                &kp F2 &kp F3 &kp F4 &kp F5 &kp F6   &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 
                &kp F1 &trans &trans &trans &trans   &to 0  &none  &to 3  &trans &kp F12 
                                     &trans &trans   &trans &trans
            >;
        };

        mouse_layer {
            // -----------------------------------------------------------------------------------------
            // |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            // |      | BT1 | BT2 | BT3 | BT4 | BT5 |   |     | RON | HUI | SAI | BRI |     |
            // |      | USB | BLE |     |     | CLR |   |     | ROF | HUD | SAD | BRD |     |
            //                    |     |     |     |   |     |     |    |
			display-name = "Mouse";
            bindings = <
                &to 0 &to 0 &to 0 &to 0 &to 0   &to 0 &to 0 &to 0 &to 0 &to 0 
                &to 0 &to 0 &to 0 &to 0 &to 0   &to 0 &mkp LCLK &mkp RCLK &to 0 &to 0 
                &to 0 &to 0 &to 0 &to 0 &to 0   &to 0 &to 0 &to 0 &to 0 &to 0 
                                  &to 0 &mo SCL &to 0 &to 0
            >;
        };

        scroll_layer {
            // -----------------------------------------------------------------------------------------
            // |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            // |      | BT1 | BT2 | BT3 | BT4 | BT5 |   |     | RON | HUI | SAI | BRI |     |
            // |      | USB | BLE |     |     | CLR |   |     | ROF | HUD | SAD | BRD |     |
            //                    |     |     |     |   |     |     |    |
			display-name = "Scroll";
            bindings = <
                &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans 
                &trans &trans &trans &trans &trans   &trans &trans &mkp MCLK &trans &trans 
                &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans 
                                     &trans &trans   &trans &trans
            >;
        };

    };
};
